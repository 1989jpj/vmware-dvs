# Devstack settings

# Each service you enable has the following meaning:
#
# vmware_dvs-server - Add this config flag for ML2 changes in OpenStack
#                  Controller for Neutron.
#
# vmware_dvs-agent - Add this config flag for OVSvApp Agent in OVSvApp VM.

# An example of enabling all-in-one OVSvApp solution is below.
# enable_service vmware_dvs-server vmware_dvs-agent

# This can be overridden in the local.conf file
VMWARE_DVS_MODE=${VMWARE_DVS_MODE:-allinone}

# VMWARE_DVS_MODE is used to configure how devstack works with VMware_DVS solution.
# You can configure this in following ways:
#
# VMWARE_DVS_MODE=allinone
# Use this mode if you want to run VMware_DVS solution in Single Node deployment.
#
# OVSVAPP_MODE=allinone_vmware_dvs
# The same, but for the VMware DVS'es driver.
#
# OVSVAPP_MODE=server
# Use this mode for the controller node of a multi-node devstack install.
#
# OVSVAPP_MODE=server_vmware_dvs
# The same, but for teh VMware DVS'es driver.
#
# OVSVAPP_MODE=compute
# Use this mode for the compute node of a multi-node devstack install.
#
# OVSVAPP_MODE=agent
# Use this mode for the OVSvApp VM of a multi-node devstack install.
#
# OVSVAPP_MODE=agent_vmware_dvs
# The same, but for teh VMware DVS'es driver.
#
# OVSVAPP_MODE=manual
# You're on your own here, and are enabling services outside the scope of
# the OVSVAPP_MODE variable.


# Set in local.conf for VMware_DVS Solution
# --------

# Provide Cluster to DVS/vDS mapping.
VMWARE_DVS_CLUSTER_DVS_MAPPING=${VMWARE_DVS_CLUSTER_DVS_MAPPING:-PhysnetNum:vDSName}

# Provade DVS Uplinks map.
VMWARE_DVS_UPLINK_MAPPING=${VMWARE_DVS_UPLINK_MAPPING:-}

# Provide Physical Bridge name.
VMWARE_DVS_PHYSICAL_BRIDGE=${VMWARE_DVS_PHYSICAL_BRIDGE:-br-ethx}

# Enable Secuirty Group support
VMWARE_DVS_ENABLE_SG=${VMWARE_DVS_ENABLE_SG:-True}

# Set FirewallDriver
VMWARE_DVS_FW_DRIVER=${VMWARE_DVS_FW_DRIVER:-networking_vsphere.agent.firewalls.vcenter_firewall.DVSFirewallDriver}

# Provide Physical Interface to add port to Physical Bridge.
VMWARE_DVS_PHYSICAL_INTERFACE=${VMWARE_DVS_PHYSICAL_INTERFACE:-ethx}

# Provide Physical Bridge Mappings.
VMWARE_DVS_BRIDGE_MAPPINGS=${VMWARE_DVS_BRIDGE_MAPPINGS:-physnet1:br-ethx}

# Name of agent file
OVSVAPP_AGENT_BINARY=${OVSVAPP_AGENT_BINARY:-$NEUTRON_BIN_DIR/neutron-ovsvapp-agent}

# Name of agent config file
OVSVAPP_CONF_FILENAME=${OVSVAPP_CONF_FILENAME:-ovsvapp_agent.ini}

# Provide Integration Bridge.
INTEGRATION_BRIDGE=${INTEGRATION_BRIDGE:-br-int}

# Provide Tunnel Bridge.
TUNNEL_BRIDGE=${TUNNEL_BRIDGE:-br-tun}

# Provide Security Bridge.
SECURITY_BRIDGE=${SECURITY_BRIDGE:-br-sec}

# Provide to enable Fault Tolerance for OVSvApp.
ENABLE_OVSVAPP_MONITOR=${ENABLE_OVSVAPP_MONITOR:-False}

# The name of the VMware vSphere cluster.
VMWAREAPI_CLUSTER=${VMWAREAPI_CLUSTER:-Cluster1}

# Provade DVS Uplinks map.
VMWARE_DVS_UPLINK_MAPPING=${VMWARE_DVS_UPLINK_MAPPING:-}

# Enable Secuirty Group support.
VMWARE_DVS_ENABLE_SG=${VMWARE_DVS_ENABLE_SG:-True}

# Set FirewallDriver.
VMWARE_DVS_FW_DRIVER=${VMWARE_DVS_FW_DRIVER:-networking_vsphere.agent.firewalls.vcenter_firewall.DVSFirewallDriver}

# Allow to use self signed ssl certificate.
VMWARE_DVS_USE_SS_SSL=${VMWARE_DVS_USE_SS_SSL:-True}

case $OVSVAPP_MODE in
    allinone)
        enable_service vmware_dvs-server vmware_dvs-agent
        ;;
    server)
        enable_service vmware_dvs-server
        ;;
    agent)
        enable_service ovsvapp-agent
        ;;
    allinone_vmware_dvs)
        enable_service vmware_dvs-server vmware_dvs-agent
        ;;
    server_vmware_dvs)
        enable_service vmware_dvs-server
        ;;
    agent_vmware_dvs)
        enable_service vmware_dvs-agent
        ;;
    manual)
        echo "Manual mode: Enabling services explicitly."
        ;;
esac
